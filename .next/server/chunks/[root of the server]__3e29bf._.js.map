{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/duzur/Downloads/Voxindiav3/config/db.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nlet cached = global.mongoose\r\n\r\nif (!cached) {\r\n    cached = global.mongoose = { conn: null, promise: null }\r\n}\r\n\r\nasync function connectDB() {\r\n    \r\n    if (cached.conn) {\r\n        return cached.conn\r\n    } \r\n\r\n    if (!cached.promise) {\r\n        const opts = {\r\n            bufferCommands:false\r\n        }\r\n\r\n        cached.promise = mongoose.connect(`${process.env.MONGODB_URI}/Voxindia`,opts).then( mongoose => {\r\n            return mongoose\r\n        })\r\n\r\n    } \r\n\r\n    cached.conn = await cached.promise\r\n    return cached.conn\r\n\r\n}\r\n\r\nexport default connectDB"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACT,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC3D;AAEA,eAAe;IAEX,IAAI,OAAO,IAAI,EAAE;QACb,OAAO,OAAO,IAAI;IACtB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACjB,MAAM,OAAO;YACT,gBAAe;QACnB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,GAAG,QAAQ,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,EAAC,MAAM,IAAI,CAAE,CAAA;YACjF,OAAO;QACX;IAEJ;IAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AAEtB;uCAEe"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/duzur/Downloads/Voxindiav3/lib/authSeller.js"],"sourcesContent":["import { clerkClient } from '@clerk/nextjs/server';\r\nimport { NextResponse } from 'next/server';\r\n\r\nconst authSeller = async (userId) => {\r\n    try {\r\n\r\n        const client = await clerkClient()\r\n        const user = await client.users.getUser(userId)\r\n\r\n        if (user.publicMetadata.role === 'seller') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        return NextResponse.json({ success: false, message: error.message });\r\n    }\r\n}\r\n\r\nexport default authSeller;"],"names":[],"mappings":";;;AACA;AADA;;;AAGA,MAAM,aAAa,OAAO;IACtB,IAAI;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD;QAC/B,MAAM,OAAO,MAAM,OAAO,KAAK,CAAC,OAAO,CAAC;QAExC,IAAI,KAAK,cAAc,CAAC,IAAI,KAAK,UAAU;YACvC,OAAO;QACX,OAAO;YACH,OAAO;QACX;IACJ,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,SAAS,MAAM,OAAO;QAAC;IACtE;AACJ;uCAEe"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/duzur/Downloads/Voxindiav3/models/Address.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst addressSchema = new mongoose.Schema({\r\n    userId: { type: String, required: true },\r\n    fullName: { type: String, required: true },\r\n    phoneNumber: { type: String, required: true },\r\n    pincode: { type: Number, required: true },\r\n    area: { type: String, required: true },\r\n    city: { type: String, required: true },\r\n    state: { type: String, required: true },\r\n})\r\n\r\nconst Address = mongoose.models.address || mongoose.model('address',addressSchema)\r\n\r\nexport default Address"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC1C;AAEA,MAAM,UAAU,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,WAAU;uCAErD"}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/duzur/Downloads/Voxindiav3/models/Order.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n\r\nconst orderSchema = new mongoose.Schema({\r\n    userId: { type: String, required: true, ref: 'user' },\r\n    items: [{\r\n        product: { type: String, required: true, ref: 'product' },\r\n        quantity: { type: Number, required: true }\r\n    }],\r\n    amount: { type: Number, required: true },\r\n    address: { type: String, ref: 'address', required: true },\r\n    status: { type: String, required: true, default: 'Order Placed' },\r\n    date: { type: Number, required: true },\r\n})\r\n\r\nconst Order = mongoose.models.order || mongoose.model('order', orderSchema)\r\n\r\nexport default Order"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACpC,QAAQ;QAAE,MAAM;QAAQ,UAAU;QAAM,KAAK;IAAO;IACpD,OAAO;QAAC;YACJ,SAAS;gBAAE,MAAM;gBAAQ,UAAU;gBAAM,KAAK;YAAU;YACxD,UAAU;gBAAE,MAAM;gBAAQ,UAAU;YAAK;QAC7C;KAAE;IACF,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,SAAS;QAAE,MAAM;QAAQ,KAAK;QAAW,UAAU;IAAK;IACxD,QAAQ;QAAE,MAAM;QAAQ,UAAU;QAAM,SAAS;IAAe;IAChE,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;AACzC;AAEA,MAAM,QAAQ,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS;uCAEhD"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/duzur/Downloads/Voxindiav3/models/Product.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst productSchema = new mongoose.Schema({\r\n  userId: { type: String, required: true },\r\n  name: { type: String, required: true },\r\n  description: { type: String, required: true },\r\n  price: { type: Number, required: true },\r\n  offerPrice: { type: Number },\r\n  perSqFtPrice: { type: Number },\r\n  perPanelSqFt: { type: Number },\r\n  image: [{ type: String, required: true }], // array of image URLs\r\n  category: { type: String, required: true },\r\n  date: { type: Number, default: Date.now },\r\n  variants: [\r\n    {\r\n      name: { type: String },\r\n      colors: [\r\n        {\r\n          name: { type: String },\r\n          price: { type: Number },\r\n          image: { type: String }, // URL string\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n});\r\n\r\nconst Product = mongoose.models.product || mongoose.model(\"product\", productSchema);\r\n\r\nexport default Product;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACxC,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,YAAY;QAAE,MAAM;IAAO;IAC3B,cAAc;QAAE,MAAM;IAAO;IAC7B,cAAc;QAAE,MAAM;IAAO;IAC7B,OAAO;QAAC;YAAE,MAAM;YAAQ,UAAU;QAAK;KAAE;IACzC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,MAAM;QAAE,MAAM;QAAQ,SAAS,KAAK,GAAG;IAAC;IACxC,UAAU;QACR;YACE,MAAM;gBAAE,MAAM;YAAO;YACrB,QAAQ;gBACN;oBACE,MAAM;wBAAE,MAAM;oBAAO;oBACrB,OAAO;wBAAE,MAAM;oBAAO;oBACtB,OAAO;wBAAE,MAAM;oBAAO;gBACxB;aACD;QACH;KACD;AACH;AAEA,MAAM,UAAU,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,WAAW;uCAEtD"}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/duzur/Downloads/Voxindiav3/app/api/order/seller-orders/route.js"],"sourcesContent":["import connectDB from \"@/config/db\";\r\nimport authSeller from \"@/lib/authSeller\";\r\nimport Address from \"@/models/Address\";\r\nimport Order from \"@/models/Order\";\r\nimport Product from \"@/models/Product\";\r\nimport { getAuth } from \"@clerk/nextjs/server\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function GET(request) {\r\n    try {\r\n        \r\n        const { userId } = getAuth(request)\r\n\r\n        const isSeller = await authSeller(userId)\r\n\r\n        if (!isSeller) {\r\n            return NextResponse.json({ success: false, message: 'not authorized' })\r\n        }\r\n\r\n        await connectDB()\r\n\r\n        await Address.length\r\n        await Product.length\r\n\r\n        const orders = await Order.find({}).populate('address items.product')\r\n\r\n        return NextResponse.json({ success: true, orders })\r\n\r\n    } catch (error) {\r\n        return NextResponse.json({ success: false, message: error.message })\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AAEA;AADA;;;;;;;;AAGO,eAAe,IAAI,OAAO;IAC7B,IAAI;QAEA,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,6KAAA,CAAA,UAAO,AAAD,EAAE;QAE3B,MAAM,WAAW,MAAM,CAAA,GAAA,mHAAA,CAAA,UAAU,AAAD,EAAE;QAElC,IAAI,CAAC,UAAU;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,SAAS;YAAiB;QACzE;QAEA,MAAM,CAAA,GAAA,8GAAA,CAAA,UAAS,AAAD;QAEd,MAAM,mHAAA,CAAA,UAAO,CAAC,MAAM;QACpB,MAAM,mHAAA,CAAA,UAAO,CAAC,MAAM;QAEpB,MAAM,SAAS,MAAM,iHAAA,CAAA,UAAK,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAO;IAErD,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,SAAS,MAAM,OAAO;QAAC;IACtE;AACJ"}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}